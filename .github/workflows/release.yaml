name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ProjectFile: "src/AvaloniaExample/AvaloniaExample.csproj"
  ProjectDir: "src/AvaloniaExample"
  ProjectName: "AvaloniaExample"

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Print debug info
        run: dotnet --info

      # https://github.com/AppImage/AppImageKit/wiki/FUSE#install-fuse
      - name: Install FUSE
        run: sudo add-apt-repository universe && sudo apt install libfuse2

      - name: Get PupNet
        run: dotnet tool install -g KuiperZone.PupNet

      - name: Create AppImage
        working-directory: ${{ env.ProjectDir }}
        run: pupnet -y -k AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ProjectName }}-${{ github.sha }}-AppImage
          path: ${{ env.ProjectDir}}/Deploy/OUT/*.AppImage
          if-no-files-found: error
          retention-days: 1

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Print debug info
        run: dotnet --info

      - name: Get PupNet
        run: dotnet tool install -g KuiperZone.PupNet

      - name: Create Setup
        working-directory: ${{ env.ProjectDir }}
        run: pupnet -y -k setup

      - name: Upload Setup
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ProjectName }}-${{ github.sha }}-Setup
          path: ${{ env.ProjectDir}}/Deploy/OUT/*.exe
          if-no-files-found: error
          retention-days: 1

# https://github.com/microsoft/github-actions-for-desktop-apps/tree/main

#      - name: Decode the PFX
#        if: runner.os == 'Windows'
#        shell: pwsh
#        run: |
#          $certBytes = [System.Convert]::FromBase64String("${{ secrets.PFX_BASE64 }}")
#          $certPath = Join-Path -Path $env:ProjectDir -ChildPath GitHubActionsWorkflow.pfx
#          [IO.File]::WriteAllBytes("$certPath", $certBytes)

